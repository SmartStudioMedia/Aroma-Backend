<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AROMA Restaurant - Settings</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            color: #2d3748;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .nav-tab {
            padding: 12px 24px;
            background: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .nav-tab:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }
        
        .nav-tab.active {
            background: #059669;
        }
        
        .settings-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .settings-header {
            margin-bottom: 30px;
        }
        
        .settings-header h3 {
            color: #2d3748;
            font-size: 1.5rem;
            margin-bottom: 10px;
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
        }
        
        .settings-section {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 25px;
        }
        
        .settings-section h4 {
            color: #2d3748;
            font-size: 1.2rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #374151;
            font-weight: 500;
        }
        
        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
            color: #374151;
            transition: all 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }
        
        .form-group small {
            color: #6b7280;
            font-size: 0.875rem;
            margin-top: 5px;
            display: block;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: #4f46e5;
            color: white;
        }
        
        .btn-primary:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: #059669;
            color: white;
        }
        
        .btn-success:hover {
            background: #047857;
        }
        
        .btn-danger {
            background: #dc2626;
            color: white;
        }
        
        .btn-danger:hover {
            background: #b91c1c;
        }
        
        .settings-actions {
            margin-top: 30px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .info-card {
            background: #dbeafe;
            border: 1px solid #93c5fd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .info-card h5 {
            color: #1e40af;
            margin-bottom: 8px;
        }
        
        .info-card p {
            color: #1e40af;
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .settings-grid {
                grid-template-columns: 1fr;
            }
            
            .settings-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚öôÔ∏è Restaurant Settings</h1>
            <p>Configure your restaurant's settings and preferences</p>
            <div class="nav-tabs">
                <a href="/admin" class="nav-tab">Dashboard</a>
                <a href="/admin/orders" class="nav-tab">Orders</a>
                <a href="/admin/items" class="nav-tab">Menu Items</a>
                <a href="/admin/categories" class="nav-tab">Categories</a>
                <a href="/admin/settings" class="nav-tab active">Settings</a>
            </div>
        </div>

        <div class="settings-container">
            <div class="settings-header">
                <h3>Restaurant Configuration</h3>
                <p>Manage your restaurant's basic settings and preferences</p>
            </div>
            
            <div class="settings-grid">
                <div class="settings-section">
                    <h4>üè™ Basic Information</h4>
                    <form onsubmit="updateBasicSettings(event)">
                        <div class="form-group">
                            <label for="restaurantName">Restaurant Name</label>
                            <input type="text" id="restaurantName" name="restaurantName" value="<%= settings.restaurantName %>" required>
                            <small>This will appear on your menu and receipts</small>
                        </div>
                        <div class="form-group">
                            <label for="currency">Currency</label>
                            <select id="currency" name="currency">
                                <option value="EUR" <%= settings.currency === 'EUR' ? 'selected' : '' %>>Euro (‚Ç¨)</option>
                                <option value="USD" <%= settings.currency === 'USD' ? 'selected' : '' %>>US Dollar ($)</option>
                                <option value="GBP" <%= settings.currency === 'GBP' ? 'selected' : '' %>>British Pound (¬£)</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Update Basic Settings</button>
                    </form>
                </div>
                
                <div class="settings-section">
                    <h4>üí∞ Pricing & Fees</h4>
                    <form onsubmit="updatePricingSettings(event)">
                        <div class="form-group">
                            <label for="taxRate">Tax Rate (%)</label>
                            <input type="number" id="taxRate" name="taxRate" value="<%= (settings.taxRate * 100).toFixed(2) %>" step="0.01" min="0" max="100">
                            <small>Enter as percentage (e.g., 18 for 18%)</small>
                        </div>
                        <div class="form-group">
                            <label for="serviceCharge">Service Charge (%)</label>
                            <input type="number" id="serviceCharge" name="serviceCharge" value="<%= (settings.serviceCharge * 100).toFixed(2) %>" step="0.01" min="0" max="100">
                            <small>Optional service charge percentage</small>
                        </div>
                        <div class="form-group">
                            <label for="deliveryFee">Delivery Fee</label>
                            <input type="number" id="deliveryFee" name="deliveryFee" value="<%= settings.deliveryFee %>" step="0.01" min="0">
                            <small>Fixed delivery fee amount</small>
                        </div>
                        <button type="submit" class="btn btn-primary">Update Pricing</button>
                    </form>
                </div>
                
                <div class="settings-section">
                    <h4>üì± System Settings</h4>
                    <form onsubmit="updateSystemSettings(event)">
                        <div class="form-group">
                            <label for="adminUser">Admin Username</label>
                            <input type="text" id="adminUser" name="adminUser" value="admin" readonly>
                            <small>Admin username for login</small>
                        </div>
                        <div class="form-group">
                            <label for="adminPass">Admin Password</label>
                            <input type="password" id="adminPass" name="adminPass" placeholder="Enter new password">
                            <small>Leave blank to keep current password</small>
                        </div>
                        <div class="form-group">
                            <label for="apiUrl">API Base URL</label>
                            <input type="url" id="apiUrl" name="apiUrl" value="<%= req.protocol %>://<%= req.get('host') %>" readonly>
                            <small>Your API endpoint URL</small>
                        </div>
                        <button type="submit" class="btn btn-primary">Update System Settings</button>
                    </form>
                </div>
                
                <div class="settings-section">
                    <h4>üîß Maintenance</h4>
                    <div class="info-card">
                        <h5>System Status</h5>
                        <p>‚úÖ All systems operational</p>
                    </div>
                    <div class="info-card">
                        <h5>Database Status</h5>
                        <p>‚úÖ In-memory storage active</p>
                    </div>
                    <div class="info-card">
                        <h5>API Status</h5>
                        <p>‚úÖ All endpoints responding</p>
                    </div>
                    <button class="btn btn-success" onclick="testConnection()">Test Connection</button>
                    <button class="btn btn-danger" onclick="resetData()">Reset All Data</button>
                </div>
            </div>
            
            <div class="settings-actions">
                <button class="btn btn-success" onclick="saveAllSettings()">Save All Settings</button>
                <button class="btn btn-primary" onclick="exportSettings()">Export Settings</button>
                <button class="btn btn-danger" onclick="resetToDefaults()">Reset to Defaults</button>
            </div>
        </div>
    </div>

    <script>
        function updateBasicSettings(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            // Here you would make an API call to update basic settings
            alert('Basic settings updated successfully!');
        }
        
        function updatePricingSettings(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            // Here you would make an API call to update pricing settings
            alert('Pricing settings updated successfully!');
        }
        
        function updateSystemSettings(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            // Here you would make an API call to update system settings
            alert('System settings updated successfully!');
        }
        
        function testConnection() {
            alert('Connection test successful! All systems are operational.');
        }
        
        function resetData() {
            if (confirm('Are you sure you want to reset all data? This action cannot be undone.')) {
                alert('Data reset functionality will be implemented');
            }
        }
        
        function saveAllSettings() {
            alert('All settings saved successfully!');
        }
        
        function exportSettings() {
            alert('Settings export functionality will be implemented');
        }
        
        function resetToDefaults() {
            if (confirm('Are you sure you want to reset all settings to defaults?')) {
                alert('Settings reset to defaults');
            }
        }
    </script>
</body>
</html>
