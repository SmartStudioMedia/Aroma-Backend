<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AROMA Restaurant - Sales Analytics</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            color: #2d3748;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .nav-tab {
            padding: 12px 24px;
            background: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .nav-tab:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }
        
        .nav-tab.active {
            background: #059669;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
            display: block;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }
        
        .stat-card.clickable {
            border: 2px solid transparent;
        }
        
        .stat-card.clickable:hover {
            border-color: #4f46e5;
        }
        
        .stat-card small {
            color: #6b7280;
            font-size: 0.8rem;
            margin-top: 5px;
            display: block;
        }
        
        .stat-card h3 {
            color: #4f46e5;
            font-size: 2rem;
            margin-bottom: 10px;
        }
        
        .stat-card p {
            color: #6b7280;
            font-size: 1.1rem;
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .chart-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .chart-container h3 {
            color: #2d3748;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .chart-wrapper {
            position: relative;
            height: 300px;
        }
        
        .period-selector {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
        }
        
        .period-btn {
            padding: 8px 16px;
            border: 2px solid #4f46e5;
            background: transparent;
            color: #4f46e5;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .period-btn.active {
            background: #4f46e5;
            color: white;
        }
        
        .period-btn:hover {
            background: #4f46e5;
            color: white;
        }
        
        .sales-summary {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
        }
        
        .summary-item {
            text-align: center;
            padding: 15px;
            background: #f8fafc;
            border-radius: 10px;
        }
        
        .summary-item h4 {
            color: #4f46e5;
            font-size: 1.5rem;
            margin-bottom: 5px;
        }
        
        .summary-item p {
            color: #6b7280;
            font-size: 0.9rem;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: #4f46e5;
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        @media (max-width: 768px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .period-selector {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ“Š Sales Analytics</h1>
            <p>Comprehensive sales data and analytics</p>
            <div class="nav-tabs">
                <a href="/admin" class="nav-tab">Dashboard</a>
                <a href="/admin/orders" class="nav-tab">Orders</a>
                <a href="/admin/items" class="nav-tab">Menu Items</a>
                <a href="/admin/categories" class="nav-tab">Categories</a>
                <a href="/admin/settings" class="nav-tab">Settings</a>
            </div>
        </div>

        <div class="stats-grid">
            <a href="/admin/sales/daily" class="stat-card clickable">
                <h3>â‚¬<%= stats.daily.toFixed(2) %></h3>
                <p>Today's Sales</p>
                <small>Click to view details</small>
            </a>
            <a href="/admin/sales/weekly" class="stat-card clickable">
                <h3>â‚¬<%= stats.weekly.toFixed(2) %></h3>
                <p>This Week</p>
                <small>Click to view details</small>
            </a>
            <a href="/admin/sales/monthly" class="stat-card clickable">
                <h3>â‚¬<%= stats.monthly.toFixed(2) %></h3>
                <p>This Month</p>
                <small>Click to view details</small>
            </a>
            <a href="/admin/sales/yearly" class="stat-card clickable">
                <h3>â‚¬<%= stats.yearly.toFixed(2) %></h3>
                <p>This Year</p>
                <small>Click to view details</small>
            </a>
            <div class="stat-card">
                <h3>â‚¬<%= stats.total.toFixed(2) %></h3>
                <p>Total Sales</p>
            </div>
        </div>

        <div class="sales-summary">
            <h3>Sales Breakdown</h3>
            <div class="summary-grid">
                <div class="summary-item">
                    <h4>â‚¬<%= stats.daily.toFixed(2) %></h4>
                    <p>Daily</p>
                </div>
                <div class="summary-item">
                    <h4>â‚¬<%= stats.weekly.toFixed(2) %></h4>
                    <p>Weekly</p>
                </div>
                <div class="summary-item">
                    <h4>â‚¬<%= stats.monthly.toFixed(2) %></h4>
                    <p>Monthly</p>
                </div>
                <div class="summary-item">
                    <h4>â‚¬<%= stats.yearly.toFixed(2) %></h4>
                    <p>Yearly</p>
                </div>
            </div>
        </div>

        <div class="charts-grid">
            <div class="chart-container">
                <h3>Sales Over Time</h3>
                <div class="period-selector">
                    <button class="period-btn active" onclick="updateChart('daily')">Daily</button>
                    <button class="period-btn" onclick="updateChart('weekly')">Weekly</button>
                    <button class="period-btn" onclick="updateChart('monthly')">Monthly</button>
                    <button class="period-btn" onclick="updateChart('yearly')">Yearly</button>
                </div>
                <div class="chart-wrapper">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>
            
            <div class="chart-container">
                <h3>Sales Distribution by Category</h3>
                <div class="chart-wrapper">
                    <canvas id="distributionChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-container">
            <h3>Recent Orders</h3>
            <div class="orders-table">
                <table>
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Table</th>
                            <th>Items</th>
                            <th>Total</th>
                            <th>Status</th>
                            <th>Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.slice(0, 10).forEach(order => { %>
                        <tr>
                            <td>#<%= order.id %></td>
                            <td><%= order.customerName %></td>
                            <td><%= order.tableNumber || 'N/A' %></td>
                            <td><%= order.items.length %> items</td>
                            <td>â‚¬<%= (order.total || 0).toFixed(2) %></td>
                            <td>
                                <span class="status-badge status-<%= order.status %>">
                                    <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                </span>
                            </td>
                            <td><%= new Date(order.timestamp || order.createdAt).toLocaleString() %></td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>

        <div style="text-align: center; margin-top: 30px;">
            <a href="/admin" class="btn btn-primary">Back to Dashboard</a>
        </div>
    </div>

    <script>
        // Actual sales data from server
        const ordersData = <%- JSON.stringify(orders) %>;
        const salesData = {
            daily: <%= stats.daily %>,
            weekly: <%= stats.weekly %>,
            monthly: <%= stats.monthly %>,
            yearly: <%= stats.yearly %>
        };

        let currentChart = null;
        let distributionChart = null;

        // Initialize charts
        function initCharts() {
            updateChart('daily');
            initDistributionChart();
        }

        function updateChart(period) {
            // Update active button
            document.querySelectorAll('.period-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            // Destroy existing chart
            if (currentChart) {
                currentChart.destroy();
            }

            const ctx = document.getElementById('salesChart').getContext('2d');
            
            // Generate real data based on actual orders
            let labels, data;
            switch(period) {
                case 'daily':
                    labels = generateHourlyLabels();
                    data = generateHourlyData();
                    break;
                case 'weekly':
                    labels = generateWeeklyLabels();
                    data = generateWeeklyData();
                    break;
                case 'monthly':
                    labels = generateMonthlyLabels();
                    data = generateMonthlyData();
                    break;
                case 'yearly':
                    labels = generateYearlyLabels();
                    data = generateYearlyData();
                    break;
            }

            currentChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Sales (â‚¬)',
                        data: data,
                        borderColor: '#4f46e5',
                        backgroundColor: 'rgba(79, 70, 229, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        }
                    }
                }
            });
        }

        function generateHourlyLabels() {
            const labels = [];
            for (let i = 0; i < 24; i++) {
                labels.push(`${i}:00`);
            }
            return labels;
        }

        function generateHourlyData() {
            const data = new Array(24).fill(0);
            ordersData.forEach(order => {
                const hour = new Date(order.timestamp || order.createdAt).getHours();
                data[hour] += order.total || 0;
            });
            return data;
        }

        function generateWeeklyLabels() {
            const labels = [];
            const today = new Date();
            for (let i = 6; i >= 0; i--) {
                const date = new Date(today.getTime() - (i * 24 * 60 * 60 * 1000));
                labels.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));
            }
            return labels;
        }

        function generateWeeklyData() {
            const data = new Array(7).fill(0);
            const today = new Date();
            ordersData.forEach(order => {
                const orderDate = new Date(order.timestamp || order.createdAt);
                const daysDiff = Math.floor((today - orderDate) / (24 * 60 * 60 * 1000));
                if (daysDiff >= 0 && daysDiff < 7) {
                    data[6 - daysDiff] += order.total || 0;
                }
            });
            return data;
        }

        function generateMonthlyLabels() {
            const labels = [];
            const today = new Date();
            for (let i = 11; i >= 0; i--) {
                const date = new Date(today.getFullYear(), today.getMonth() - i, 1);
                labels.push(date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }));
            }
            return labels;
        }

        function generateMonthlyData() {
            const data = new Array(12).fill(0);
            const today = new Date();
            ordersData.forEach(order => {
                const orderDate = new Date(order.timestamp || order.createdAt);
                const monthsDiff = (today.getFullYear() - orderDate.getFullYear()) * 12 + 
                                 (today.getMonth() - orderDate.getMonth());
                if (monthsDiff >= 0 && monthsDiff < 12) {
                    data[11 - monthsDiff] += order.total || 0;
                }
            });
            return data;
        }

        function generateYearlyLabels() {
            const labels = [];
            const currentYear = new Date().getFullYear();
            for (let i = 4; i >= 0; i--) {
                labels.push((currentYear - i).toString());
            }
            return labels;
        }

        function generateYearlyData() {
            const data = new Array(5).fill(0);
            const currentYear = new Date().getFullYear();
            ordersData.forEach(order => {
                const orderYear = new Date(order.timestamp || order.createdAt).getFullYear();
                const yearDiff = currentYear - orderYear;
                if (yearDiff >= 0 && yearDiff < 5) {
                    data[4 - yearDiff] += order.total || 0;
                }
            });
            return data;
        }

        function initDistributionChart() {
            const ctx = document.getElementById('distributionChart').getContext('2d');
            
            // Calculate real category data from orders
            const categoryData = {};
            ordersData.forEach(order => {
                order.items.forEach(item => {
                    const menuItem = item; // Assuming item has category info
                    const category = 'General'; // Default category
                    if (!categoryData[category]) {
                        categoryData[category] = 0;
                    }
                    categoryData[category] += (item.price || 0) * (item.qty || 1);
                });
            });

            const labels = Object.keys(categoryData);
            const data = Object.values(categoryData);
            const colors = ['#4f46e5', '#059669', '#dc2626', '#f59e0b', '#8b5cf6', '#06b6d4'];
            
            distributionChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: colors.slice(0, labels.length),
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Initialize charts when page loads
        document.addEventListener('DOMContentLoaded', initCharts);
    </script>
</body>
</html>
