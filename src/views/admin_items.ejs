<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AROMA Restaurant - Menu Items Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            color: #2d3748;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .nav-tab {
            padding: 12px 24px;
            background: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .nav-tab:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }
        
        .nav-tab.active {
            background: #1e40af;
        }
        
        .items-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .items-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .items-header h3 {
            color: #2d3748;
            font-size: 1.8rem;
        }
        
        .category-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .category-tab {
            padding: 12px 24px;
            border: 2px solid #e5e7eb;
            background: white;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            color: #374151;
            text-decoration: none;
            display: inline-block;
            user-select: none;
            position: relative;
            z-index: 10;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-size: 14px;
        }
        
        .category-tab:hover {
            border-color: #4f46e5;
            background: #f0f0ff;
            color: #4f46e5;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(79, 70, 229, 0.2);
        }
        
        .category-tab.active {
            background: #4f46e5;
            color: white;
            border-color: #4f46e5;
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
            transform: translateY(-1px);
        }
        
        .category-tab:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .items-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .item-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border: 1px solid #e5e7eb;
        }
        
        .item-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        
        .item-image-container {
            position: relative;
            width: 100%;
            height: 200px;
            margin-bottom: 15px;
        }
        
        .item-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
        }
        
        .video-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            z-index: 10;
        }
        
        .item-name {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 8px;
        }
        
        .item-description {
            color: #6b7280;
            margin-bottom: 15px;
            line-height: 1.5;
        }
        
        .item-details {
            margin-bottom: 15px;
        }
        
        .detail-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        
        .detail-label {
            font-weight: 500;
            color: #4b5563;
        }
        
        .detail-value {
            color: #6b7280;
        }
        
        .item-price {
            font-size: 1.5rem;
            font-weight: 700;
            color: #059669;
            margin-bottom: 15px;
        }
        
        .item-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: #4f46e5;
            color: white;
        }
        
        .btn-primary:hover {
            background: #3730a3;
        }
        
        .btn-success {
            background: #059669;
            color: white;
        }
        
        .btn-success:hover {
            background: #047857;
        }
        
        .btn-danger {
            background: #dc2626;
            color: white;
        }
        
        .btn-danger:hover {
            background: #b91c1c;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 0.875rem;
        }
        
        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .status-active {
            background: #d1fae5;
            color: #065f46;
        }
        
        .status-inactive {
            background: #fee2e2;
            color: #991b1b;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .modal-header {
            padding: 20px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-header h2 {
            margin: 0;
            color: #2d3748;
        }
        
        .close {
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #6b7280;
        }
        
        .close:hover {
            color: #374151;
        }
        
        .form-group {
            margin-bottom: 20px;
            padding: 0 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #374151;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #4f46e5;
        }
        
        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        .form-actions {
            padding: 20px;
            border-top: 1px solid #e5e7eb;
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .checkbox-group input[type="checkbox"] {
            width: auto;
        }
        
        .radio-group {
            display: flex;
            gap: 20px;
            margin-top: 8px;
        }
        
        .radio-label {
            display: flex;
            align-items: center;
            cursor: pointer;
            font-weight: 500;
        }
        
        .radio-label input[type="radio"] {
            margin-right: 8px;
            accent-color: #4f46e5;
        }
        
        .radio-label:hover {
            color: #4f46e5;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Menu Items Management</h1>
            <p>Manage your restaurant's menu items and categories</p>
            <div class="nav-tabs">
                <a href="/admin" class="nav-tab">Dashboard</a>
                <a href="/admin/orders" class="nav-tab">Orders</a>
                <a href="/admin/items" class="nav-tab active">Menu Items</a>
                <a href="/admin/categories" class="nav-tab">Categories</a>
                <a href="/admin/clients" class="nav-tab">Clients</a>
                <a href="/admin/settings" class="nav-tab">Settings</a>
            </div>
        </div>

        <div class="items-container">
            <div class="items-header">
                <h3>Menu Items Management</h3>
                <button class="btn btn-primary" onclick="openAddItemModal()">+ Add New Item</button>
            </div>

            <!-- Category Tabs -->
            <div class="category-tabs" id="categoryTabs">
                <button class="category-tab active" data-category="all">
                    All Items (<%= items.length %>)
                </button>
                <% categories.forEach(function(category) { %>
                <button class="category-tab" data-category="<%= category.id %>">
                    <%= category.icon %> 
                    <% 
                        var categoryName = '';
                        if (category.name && typeof category.name === 'object' && category.name.en) {
                            categoryName = category.name.en;
                        } else if (typeof category.name === 'string') {
                            categoryName = category.name;
                        } else {
                            categoryName = 'Unknown';
                        }
                    %>
                    <%= categoryName %>
                    (<%= items.filter(function(item) { return item.category_id === category.id; }).length %>)
                </button>
                <% }); %>
            </div>

            <!-- Items Grid -->
            <div class="items-grid" id="itemsGrid">
                <% items.forEach(function(item) { %>
                <div class="item-card" data-category-id="<%= item.category_id %>">
                    <div class="item-image-container">
                        <% if (item.video && item.video.trim() !== '' && (item.video.includes('youtube.com') || item.video.includes('youtu.be') || item.video.includes('vimeo.com') || item.video.includes('.mp4') || item.video.includes('.webm'))) { %>
                            <% if (item.thumbnail) { %>
                                <img src="<%= item.thumbnail %>" alt="<%= item.name && item.name.en ? item.name.en : (item.name || 'Item') %>" class="item-image" onerror="this.src='<%= item.image %>'">
                            <% } else { %>
                                <img src="<%= item.image %>" alt="<%= item.name && item.name.en ? item.name.en : (item.name || 'Item') %>" class="item-image" onerror="this.src='https://via.placeholder.com/300x200?text=No+Image'">
                            <% } %>
                            <div class="video-indicator">🎥 Video Available</div>
                        <% } else { %>
                            <img src="<%= item.image %>" alt="<%= item.name && item.name.en ? item.name.en : (item.name || 'Item') %>" class="item-image" onerror="this.src='https://via.placeholder.com/300x200?text=No+Image'">
                        <% } %>
                    </div>
                    
                    <div class="item-name"><%= item.name && item.name.en ? item.name.en : (item.name || 'Item') %></div>
                    <div class="item-description"><%= item.description && item.description.en ? item.description.en : (item.description || 'No description') %></div>
                    
                    <div class="item-details">
                        <div class="detail-item">
                            <div class="detail-label">Category</div>
                            <div class="detail-value">
                                <% var category = categories.find(function(c) { return c.id === item.category_id; }); %>
                                <% if (category) { %>
                                    <%= category.icon %> 
                                    <% 
                                        var categoryName = '';
                                        if (category.name && typeof category.name === 'object' && category.name.en) {
                                            categoryName = category.name.en;
                                        } else if (typeof category.name === 'string') {
                                            categoryName = category.name;
                                        } else {
                                            categoryName = 'Unknown';
                                        }
                                    %>
                                    <%= categoryName %>
                                <% } else { %>
                                    Unknown
                                <% } %>
                            </div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Status</div>
                            <div class="detail-value">
                                <span class="status-badge status-<%= item.active ? 'active' : 'inactive' %>">
                                    <%= item.active ? 'Active' : 'Inactive' %>
                                </span>
                            </div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Prep Time</div>
                            <div class="detail-value"><%= item.prepTime && item.prepTime.en ? item.prepTime.en : (item.prepTime || 'N/A') %></div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Allergies</div>
                            <div class="detail-value"><%= item.allergies && item.allergies.en ? item.allergies.en : (item.allergies || 'None') %></div>
                        </div>
                    </div>
                    
                    <div class="item-price">€<%= (item.price || 0).toFixed(2) %></div>
                    
                    <div class="item-actions">
                        <button class="btn btn-primary btn-sm" onclick="editItem(<%= item.id %>)">Edit</button>
                        <button class="btn btn-<%= item.active ? 'danger' : 'success' %> btn-sm" onclick="toggleItemStatus(<%= item.id %>, <%= !item.active %>)">
                            <%= item.active ? 'Deactivate' : 'Activate' %>
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteItem(<%= item.id %>)">Delete</button>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
    </div>

    <!-- Add/Edit Item Modal -->
    <div id="itemModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add New Item</h2>
                <span class="close" onclick="closeModal()">×</span>
            </div>
            <form id="itemForm">
                <input type="hidden" id="itemId" value="">
                
                <div class="form-group">
                    <label for="itemName">Item Name (English)</label>
                    <input type="text" id="itemName" name="name" required>
                </div>
                
                <div class="form-group">
                    <label for="itemDescription">Description (English)</label>
                    <textarea id="itemDescription" name="description" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="itemPrice">Price (€)</label>
                    <input type="number" id="itemPrice" name="price" step="0.01" min="0" required>
                </div>
                
                <div class="form-group">
                    <label for="itemCategory">Category</label>
                    <select id="itemCategory" name="category_id" required>
                        <% categories.forEach(function(category) { %>
                        <option value="<%= category.id %>">
                            <%= category.icon %> 
                            <% 
                                var categoryName = '';
                                if (category.name && typeof category.name === 'object' && category.name.en) {
                                    categoryName = category.name.en;
                                } else if (typeof category.name === 'string') {
                                    categoryName = category.name;
                                } else {
                                    categoryName = 'Unknown';
                                }
                            %>
                            <%= categoryName %>
                        </option>
                        <% }); %>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Media Type</label>
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="mediaType" value="image" checked onchange="toggleMediaFields()">
                            <span>Image</span>
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="mediaType" value="video" onchange="toggleMediaFields()">
                            <span>Video</span>
                        </label>
                    </div>
                </div>
                
                <div class="form-group" id="imageField">
                    <label for="itemImage">Image URL</label>
                    <input type="url" id="itemImage" name="image" placeholder="https://example.com/image.jpg">
                </div>
                
                <div class="form-group" id="videoField" style="display: none;">
                    <label for="itemVideo">Video URL</label>
                    <input type="url" id="itemVideo" name="video" placeholder="https://www.youtube.com/watch?v=... or https://www.youtube.com/shorts/...">
                    <div id="thumbnailPreview" style="margin-top: 10px; display: none;">
                        <label>Generated Thumbnail:</label>
                        <img id="thumbnailImage" src="" alt="Thumbnail" style="width: 200px; height: 120px; object-fit: cover; border-radius: 8px; border: 1px solid #ddd;">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="itemPrepTime">Prep Time (English)</label>
                    <input type="text" id="itemPrepTime" name="prepTime" placeholder="15-20 minutes">
                </div>
                
                <div class="form-group">
                    <label for="itemAllergies">Allergies (English)</label>
                    <input type="text" id="itemAllergies" name="allergies" placeholder="Contains nuts, dairy">
                </div>
                
                <div class="form-group">
                    <div class="checkbox-group">
                        <input type="checkbox" id="itemActive" name="active" checked>
                        <label for="itemActive">Active</label>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn btn-danger" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Item</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        var currentItemId = null;

        // Category filtering function
        function filterByCategory(categoryId) {
            console.log('Filtering by category:', categoryId);
            
            // Remove active class from all tabs
            var allTabs = document.querySelectorAll('.category-tab');
            for (var i = 0; i < allTabs.length; i++) {
                allTabs[i].classList.remove('active');
            }
            
            // Add active class to clicked tab
            var activeTab = document.querySelector('[data-category="' + categoryId + '"]');
            if (activeTab) {
                activeTab.classList.add('active');
                console.log('Active tab set:', activeTab.textContent.trim());
            }
            
            // Get all item cards
            var itemCards = document.querySelectorAll('.item-card');
            console.log('Total item cards found:', itemCards.length);
            
            var visibleCount = 0;
            
            // Filter items based on category
            for (var i = 0; i < itemCards.length; i++) {
                var card = itemCards[i];
                var cardCategoryId = card.getAttribute('data-category-id');
                
                console.log('Item card', i, 'category_id:', cardCategoryId, 'filtering for:', categoryId);
                
                if (categoryId === 'all') {
                    // Show all items
                    card.style.display = 'block';
                    card.style.opacity = '1';
                    visibleCount++;
                } else {
                    // Show only items from selected category
                    if (cardCategoryId == categoryId) {
                        card.style.display = 'block';
                        card.style.opacity = '1';
                        visibleCount++;
                        console.log('Showing item with category_id:', cardCategoryId);
                    } else {
                        card.style.display = 'none';
                        card.style.opacity = '0';
                        console.log('Hiding item with category_id:', cardCategoryId);
                    }
                }
            }
            
            console.log('Visible items after filter:', visibleCount);
        }

        // Initialize page when loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, initializing category tabs...');
            
            // Add click event listeners to all category tabs
            var categoryTabs = document.querySelectorAll('.category-tab');
            console.log('Found category tabs:', categoryTabs.length);
            
            // Debug: Log all category tabs and their data-category attributes
            for (var i = 0; i < categoryTabs.length; i++) {
                var tab = categoryTabs[i];
                console.log('Category tab', i, ':', tab.textContent.trim(), 'data-category:', tab.getAttribute('data-category'));
            }
            
            // Debug: Log all item cards and their category IDs
            var itemCards = document.querySelectorAll('.item-card');
            console.log('Total item cards found on page load:', itemCards.length);
            for (var i = 0; i < itemCards.length; i++) {
                var card = itemCards[i];
                var cardCategoryId = card.getAttribute('data-category-id');
                var itemName = card.querySelector('.item-name') ? card.querySelector('.item-name').textContent.trim() : 'Unknown';
                console.log('Item card', i, ':', itemName, 'category_id:', cardCategoryId);
            }
            
            for (var i = 0; i < categoryTabs.length; i++) {
                var tab = categoryTabs[i];
                var categoryId = tab.getAttribute('data-category');
                console.log('Tab ' + (i + 1) + ':', categoryId);
                
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    var clickedCategoryId = this.getAttribute('data-category');
                    console.log('Tab clicked:', clickedCategoryId);
                    
                    // Call the filter function
                    filterByCategory(clickedCategoryId);
                });
                
                // Add hover effects
                tab.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('active')) {
                        this.style.transform = 'translateY(-2px)';
                    }
                });
                
                tab.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            }
            
            // Initialize with all items visible
            console.log('Initializing with all items visible...');
            filterByCategory('all');
            
            // Add event listener to video input for thumbnail preview
            var videoInput = document.getElementById('itemVideo');
            if (videoInput) {
                videoInput.addEventListener('input', updateThumbnailPreview);
                videoInput.addEventListener('paste', function() {
                    setTimeout(updateThumbnailPreview, 100);
                });
            }
        });

        // Helper function to extract YouTube video ID
        function getYouTubeVideoId(url) {
            if (!url || typeof url !== 'string') return '';
            
            try {
                // Handle regular YouTube URLs: https://www.youtube.com/watch?v=VIDEO_ID
                if (url.includes('youtube.com/watch?v=')) {
                    var parts = url.split('v=');
                    if (parts.length > 1) {
                        return parts[1].split('&')[0];
                    }
                }
                // Handle YouTube Shorts URLs: https://www.youtube.com/shorts/VIDEO_ID
                else if (url.includes('youtube.com/shorts/')) {
                    var parts = url.split('youtube.com/shorts/');
                    if (parts.length > 1) {
                        return parts[1].split('?')[0];
                    }
                }
                // Handle youtu.be URLs: https://youtu.be/VIDEO_ID
                else if (url.includes('youtu.be/')) {
                    var parts = url.split('youtu.be/');
                    if (parts.length > 1) {
                        return parts[1].split('?')[0];
                    }
                }
                
                return '';
            } catch (error) {
                console.error('Error extracting YouTube video ID:', error);
                return '';
            }
        }

        // Helper function to generate YouTube thumbnail URL
        function generateYouTubeThumbnail(videoUrl) {
            var videoId = getYouTubeVideoId(videoUrl);
            if (!videoId) return null;
            
            // Return high quality thumbnail URL
            return 'https://img.youtube.com/vi/' + videoId + '/maxresdefault.jpg';
        }

        // Function to update thumbnail preview
        function updateThumbnailPreview() {
            var videoInput = document.getElementById('itemVideo');
            var thumbnailPreview = document.getElementById('thumbnailPreview');
            var thumbnailImage = document.getElementById('thumbnailImage');
            
            if (videoInput.value.trim() !== '') {
                var thumbnailUrl = generateYouTubeThumbnail(videoInput.value);
                if (thumbnailUrl) {
                    thumbnailImage.src = thumbnailUrl;
                    thumbnailPreview.style.display = 'block';
                    console.log('Generated thumbnail URL:', thumbnailUrl);
                } else {
                    thumbnailPreview.style.display = 'none';
                }
            } else {
                thumbnailPreview.style.display = 'none';
            }
        }

        // Media type toggle function
        function toggleMediaFields() {
            var mediaType = document.querySelector('input[name="mediaType"]:checked').value;
            var imageField = document.getElementById('imageField');
            var videoField = document.getElementById('videoField');
            var imageInput = document.getElementById('itemImage');
            var videoInput = document.getElementById('itemVideo');
            
            console.log('toggleMediaFields called, mediaType:', mediaType);
            
            if (mediaType === 'video') {
                imageField.style.display = 'none';
                videoField.style.display = 'block';
                imageInput.value = ''; // Clear image field
                imageInput.required = false;
                videoInput.required = true;
                console.log('Switched to video mode');
            } else {
                imageField.style.display = 'block';
                videoField.style.display = 'none';
                videoInput.value = ''; // Clear video field
                videoInput.required = false;
                imageInput.required = true;
                console.log('Switched to image mode');
            }
        }

        // Modal functions
        function openAddItemModal(categoryId) {
            currentItemId = null;
            document.getElementById('modalTitle').textContent = 'Add New Item';
            document.getElementById('itemForm').reset();
            document.getElementById('itemActive').checked = true;
            
            // Reset media type to image
            document.querySelector('input[name="mediaType"][value="image"]').checked = true;
            toggleMediaFields();
            
            if (categoryId) {
                document.getElementById('itemCategory').value = categoryId;
            }
            
            document.getElementById('itemModal').style.display = 'block';
        }

        function editItem(itemId) {
            currentItemId = itemId;
            document.getElementById('modalTitle').textContent = 'Edit Item';
            
            // Find the item data (this would normally come from the server)
            var itemData = null;
            var items = <%- JSON.stringify(items) %>;
            for (var i = 0; i < items.length; i++) {
                if (items[i].id == itemId) {
                    itemData = items[i];
                    break;
                }
            }
            
            if (itemData) {
                document.getElementById('itemName').value = itemData.name.en || '';
                document.getElementById('itemDescription').value = itemData.description.en || '';
                document.getElementById('itemPrice').value = itemData.price || '';
                document.getElementById('itemCategory').value = itemData.category_id || '';
                document.getElementById('itemImage').value = itemData.image || '';
                document.getElementById('itemVideo').value = itemData.video || '';
                document.getElementById('itemPrepTime').value = itemData.prepTime.en || '';
                document.getElementById('itemAllergies').value = itemData.allergies.en || '';
                document.getElementById('itemActive').checked = itemData.active !== false;
                
                // Set media type based on what exists
                console.log('editItem - itemData.video:', itemData.video);
                if (itemData.video && itemData.video.trim() !== '') {
                    document.querySelector('input[name="mediaType"][value="video"]').checked = true;
                    console.log('Setting video mode for editing');
                } else {
                    document.querySelector('input[name="mediaType"][value="image"]').checked = true;
                    console.log('Setting image mode for editing');
                }
                toggleMediaFields();
            }
            
            document.getElementById('itemModal').style.display = 'block';
        }

        function toggleItemStatus(itemId, newStatus) {
            fetch('/api/menu/items/' + itemId, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    active: newStatus
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Item status updated successfully!');
                    location.reload();
                } else {
                    alert('Error updating item status: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating item status: ' + error.message);
            });
        }

        function deleteItem(itemId) {
            if (confirm('Are you sure you want to delete this item?')) {
                fetch('/api/menu/items/' + itemId, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Item deleted successfully!');
                        location.reload();
                    } else {
                        alert('Error deleting item: ' + (data.error || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting item: ' + error.message);
                });
            }
        }

        function closeModal() {
            document.getElementById('itemModal').style.display = 'none';
        }

        // Form submission handler
        document.getElementById('itemForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            var mediaType = document.querySelector('input[name="mediaType"]:checked').value;
            var formData = {
                name: {
                    en: document.getElementById('itemName').value
                },
                description: {
                    en: document.getElementById('itemDescription').value
                },
                price: parseFloat(document.getElementById('itemPrice').value),
                category_id: parseInt(document.getElementById('itemCategory').value),
                prepTime: {
                    en: document.getElementById('itemPrepTime').value
                },
                allergies: {
                    en: document.getElementById('itemAllergies').value
                },
                active: document.getElementById('itemActive').checked
            };
            
            // Only include the selected media type
            if (mediaType === 'video') {
                formData.video = document.getElementById('itemVideo').value;
                formData.image = ''; // Clear image field
                console.log('Form submission - Video mode:', formData.video);
            } else {
                formData.image = document.getElementById('itemImage').value;
                formData.video = ''; // Clear video field
                console.log('Form submission - Image mode:', formData.image);
            }
            
            console.log('Form data being submitted:', formData);
            
            var url = currentItemId ? '/api/menu/items/' + currentItemId : '/api/menu/items';
            var method = currentItemId ? 'PUT' : 'POST';
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Item saved successfully!');
                    location.reload();
                } else {
                    alert('Error saving item: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving item: ' + error.message);
            });
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            var modal = document.getElementById('itemModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
