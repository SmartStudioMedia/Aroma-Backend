<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AROMA Restaurant - Menu Items Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            color: #2d3748;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .nav-tab {
            padding: 12px 24px;
            background: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .nav-tab:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }
        
        .nav-tab.active {
            background: #059669;
        }
        
        .items-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .items-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .items-header h3 {
            font-size: 1.5rem;
            color: #2d3748;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: #4f46e5;
            color: white;
        }
        
        .btn-primary:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: #059669;
            color: white;
        }
        
        .btn-danger {
            background: #dc2626;
            color: white;
        }
        
        .btn-sm {
            padding: 8px 16px;
            font-size: 0.875rem;
        }
        
        .items-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }
        
        .item-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border: 1px solid #e5e7eb;
        }
        
        .item-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        
        .item-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 15px;
        }
        
        .item-name {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 8px;
        }
        
        .item-description {
            color: #6b7280;
            font-size: 0.875rem;
            margin-bottom: 15px;
            line-height: 1.4;
        }
        
        .item-price {
            font-size: 1.5rem;
            font-weight: 700;
            color: #059669;
            margin-bottom: 15px;
        }
        
        .item-details {
            margin-bottom: 15px;
        }
        
        .detail-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            padding: 4px 0;
        }
        
        .detail-label {
            font-weight: 500;
            color: #374151;
        }
        
        .detail-value {
            color: #6b7280;
        }
        
        .item-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .status-active {
            background: #d1fae5;
            color: #065f46;
        }
        
        .status-inactive {
            background: #fee2e2;
            color: #991b1b;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e5e7eb;
        }
        
        .modal-header h2 {
            color: #1f2937;
            font-size: 1.5rem;
        }
        
        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }
        
        .close:hover {
            color: #000;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #374151;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #4f46e5;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin: 0;
        }
        
        .category-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        .category-tab {
            padding: 12px 24px;
            border: 2px solid #e5e7eb;
            background: white;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            color: #374151;
            text-decoration: none;
            display: inline-block;
            user-select: none;
            position: relative;
            z-index: 10;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-size: 14px;
        }
        
        .category-tab:hover {
            border-color: #4f46e5;
            background: #f0f0ff;
            color: #4f46e5;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(79, 70, 229, 0.2);
        }
        
        .category-tab.active {
            background: #4f46e5;
            color: white;
            border-color: #4f46e5;
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
            transform: translateY(-1px);
        }
        
        .category-tab:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .item-card {
            transition: all 0.3s ease;
        }
        
        .item-card.hidden {
            display: none;
        }
        
        .category-section {
            margin-bottom: 40px;
        }
        
        .category-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 20px;
            background: #f8fafc;
            border-radius: 10px;
            border-left: 4px solid #4f46e5;
        }
        
        .category-header h3 {
            color: #2d3748;
            font-size: 1.5rem;
            margin: 0;
        }
        
        .category-stats {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .stat-badge {
            background: #4f46e5;
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        @media (max-width: 768px) {
            .items-grid {
                grid-template-columns: 1fr;
            }
            
            .items-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🍽️ Menu Items Management</h1>
            <p>Manage your restaurant's menu items and categories</p>
            <div class="nav-tabs">
                <a href="/admin" class="nav-tab">Dashboard</a>
                <a href="/admin/orders" class="nav-tab">Orders</a>
                <a href="/admin/items" class="nav-tab active">Menu Items</a>
                <a href="/admin/categories" class="nav-tab">Categories</a>
                <a href="/admin/settings" class="nav-tab">Settings</a>
            </div>
        </div>

        <div class="items-container">
            <div class="items-header">
                <h3>Menu Items Management</h3>
                <button class="btn btn-primary" onclick="openAddItemModal()">+ Add New Item</button>
            </div>

            <!-- Category Tabs -->
            <div class="category-tabs" id="categoryTabs">
                <button class="category-tab active" data-category="all">
                    📋 All Items (<%= items.length %>)
                </button>
                <% categories.forEach(category => { %>
                <button class="category-tab" data-category="<%= category.id %>">
                    <%= category.icon %> <%= category.name %> 
                    (<%= items.filter(item => item.category_id === category.id).length %>)
                </button>
                <% }); %>
            </div>

            <!-- Items Grid -->
            <div class="items-grid" id="itemsGrid">
                <% items.forEach(item => { %>
                <div class="item-card" data-category-id="<%= item.category_id %>">
                    <% if (item.video) { %>
                        <video class="item-image" controls>
                            <source src="<%= item.video %>" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    <% } else { %>
                        <img src="<%= item.image %>" alt="<%= item.name.en %>" class="item-image" onerror="this.src='https://via.placeholder.com/300x200?text=No+Image'">
                    <% } %>
                    
                    <div class="item-name"><%= item.name.en %></div>
                    <div class="item-description"><%= item.description.en %></div>
                    
                    <div class="item-details">
                        <div class="detail-item">
                            <div class="detail-label">Category</div>
                            <div class="detail-value">
                                <% const category = categories.find(c => c.id === item.category_id); %>
                                <%= category ? category.icon + ' ' + category.name : 'Unknown' %>
                            </div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Status</div>
                            <div class="detail-value">
                                <span class="status-badge status-<%= item.active ? 'active' : 'inactive' %>">
                                    <%= item.active ? 'Active' : 'Inactive' %>
                                </span>
                            </div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Prep Time</div>
                            <div class="detail-value"><%= item.prepTime.en %></div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Allergies</div>
                            <div class="detail-value"><%= item.allergies.en %></div>
                        </div>
                    </div>
                    
                    <div class="item-price">€<%= (item.price || 0).toFixed(2) %></div>
                    
                    <div class="item-actions">
                        <button class="btn btn-primary btn-sm" onclick="editItem(<%= item.id %>)">Edit</button>
                        <button class="btn btn-<%= item.active ? 'danger' : 'success' %> btn-sm" onclick="toggleItemStatus(<%= item.id %>, <%= !item.active %>)">
                            <%= item.active ? 'Deactivate' : 'Activate' %>
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteItem(<%= item.id %>)">Delete</button>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
    </div>

    <!-- Add/Edit Item Modal -->
    <div id="itemModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add New Item</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <form id="itemForm">
                <input type="hidden" id="itemId" value="">
                
                <div class="form-group">
                    <label for="itemName">Item Name *</label>
                    <input type="text" id="itemName" required>
                </div>
                
                <div class="form-group">
                    <label for="itemDescription">Description</label>
                    <textarea id="itemDescription" rows="3"></textarea>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="itemPrice">Price (€) *</label>
                        <input type="number" id="itemPrice" step="0.01" min="0" required>
                    </div>
                    <div class="form-group">
                        <label for="itemCategory">Category *</label>
                        <select id="itemCategory" required>
                            <option value="">Select Category</option>
                            <% categories.forEach(category => { %>
                            <option value="<%= category.id %>"><%= category.icon %> <%= category.name %></option>
                            <% }); %>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="itemImage">Image URL</label>
                    <input type="url" id="itemImage" placeholder="https://example.com/image.jpg">
                </div>
                
                <div class="form-group">
                    <label for="itemVideo">Video URL (optional)</label>
                    <input type="url" id="itemVideo" placeholder="https://example.com/video.mp4">
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="itemPrepTime">Prep Time</label>
                        <input type="text" id="itemPrepTime" placeholder="15 min">
                    </div>
                    <div class="form-group">
                        <label for="itemAllergies">Allergies</label>
                        <input type="text" id="itemAllergies" placeholder="Contains gluten, dairy">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="itemIngredients">Ingredients</label>
                    <textarea id="itemIngredients" rows="2" placeholder="Beef patty, lettuce, tomato, onion, bun"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="itemNutrition">Nutrition Info</label>
                    <textarea id="itemNutrition" rows="2" placeholder="Calories: 650, Protein: 35g, Carbs: 45g, Fat: 35g"></textarea>
                </div>
                
                <div class="form-group">
                    <div class="checkbox-group">
                        <input type="checkbox" id="itemActive" checked>
                        <label for="itemActive">Active (visible to customers)</label>
                    </div>
                </div>
                
                <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;">
                    <button type="button" class="btn" onclick="closeModal()" style="background: #6b7280; color: white;">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Item</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let currentItemId = null;
        
        function openAddItemModal() {
            currentItemId = null;
            document.getElementById('modalTitle').textContent = 'Add New Item';
            document.getElementById('itemForm').reset();
            document.getElementById('itemActive').checked = true;
            document.getElementById('itemModal').style.display = 'block';
        }
        
        function editItem(itemId) {
            currentItemId = itemId;
            document.getElementById('modalTitle').textContent = 'Edit Item';
            
            // Find the item data
            const item = <%= JSON.stringify(items) %>.find(i => i.id === itemId);
            if (item) {
                document.getElementById('itemId').value = item.id;
                document.getElementById('itemName').value = item.name.en || '';
                document.getElementById('itemDescription').value = item.description.en || '';
                document.getElementById('itemPrice').value = item.price || '';
                document.getElementById('itemCategory').value = item.category_id || '';
                document.getElementById('itemImage').value = item.image || '';
                document.getElementById('itemVideo').value = item.video || '';
                document.getElementById('itemPrepTime').value = item.prepTime.en || '';
                document.getElementById('itemAllergies').value = item.allergies.en || '';
                document.getElementById('itemIngredients').value = item.ingredients.en || '';
                document.getElementById('itemNutrition').value = item.nutrition.en || '';
                document.getElementById('itemActive').checked = item.active;
            }
            
            document.getElementById('itemModal').style.display = 'block';
        }
        
        function closeModal() {
            document.getElementById('itemModal').style.display = 'none';
        }
        
        function toggleItemStatus(itemId, newStatus) {
            if (confirm('Are you sure you want to ' + (newStatus ? 'activate' : 'deactivate') + ' this item?')) {
                fetch(`/api/menu/items/${itemId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        active: newStatus
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error updating item: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error updating item');
                });
            }
        }
        
        function deleteItem(itemId) {
            if (confirm('Are you sure you want to delete this item? This action cannot be undone.')) {
                fetch(`/api/menu/items/${itemId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error deleting item: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting item');
                });
            }
        }
        
        document.getElementById('itemForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('itemName').value,
                description: document.getElementById('itemDescription').value,
                price: parseFloat(document.getElementById('itemPrice').value),
                image: document.getElementById('itemImage').value,
                video: document.getElementById('itemVideo').value,
                category_id: parseInt(document.getElementById('itemCategory').value),
                prepTime: document.getElementById('itemPrepTime').value,
                allergies: document.getElementById('itemAllergies').value,
                ingredients: document.getElementById('itemIngredients').value,
                nutrition: document.getElementById('itemNutrition').value,
                active: document.getElementById('itemActive').checked
            };
            
            const url = currentItemId ? `/api/menu/items/${currentItemId}` : '/api/menu/items';
            const method = currentItemId ? 'PUT' : 'POST';
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Item saved successfully!');
                    location.reload();
                } else {
                    alert('Error saving item: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving item: ' + error.message);
            });
        });
        
        // Category filtering function
        function filterByCategory(categoryId) {
            console.log('🔍 Filtering by category:', categoryId);
            
            // Remove active class from all tabs
            document.querySelectorAll('.category-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Add active class to clicked tab
            const activeTab = document.querySelector(`[data-category="${categoryId}"]`);
            if (activeTab) {
                activeTab.classList.add('active');
                console.log('✅ Active tab set:', activeTab.textContent.trim());
            }
            
            // Get all item cards
            const itemCards = document.querySelectorAll('.item-card');
            console.log('📦 Total item cards found:', itemCards.length);
            
            let visibleCount = 0;
            
            // Filter items based on category
            itemCards.forEach(card => {
                const cardCategoryId = card.getAttribute('data-category-id');
                
                if (categoryId === 'all') {
                    // Show all items
                    card.style.display = 'block';
                    card.style.opacity = '1';
                    visibleCount++;
                } else {
                    // Show only items from selected category
                    if (cardCategoryId == categoryId) {
                        card.style.display = 'block';
                        card.style.opacity = '1';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                        card.style.opacity = '0';
                    }
                }
            });
            
            console.log('✅ Visible items after filter:', visibleCount);
        }
        
        // Open add item modal with pre-selected category
        function openAddItemModal(categoryId = null) {
            currentItemId = null;
            document.getElementById('modalTitle').textContent = 'Add New Item';
            document.getElementById('itemForm').reset();
            document.getElementById('itemActive').checked = true;
            
            if (categoryId) {
                document.getElementById('itemCategory').value = categoryId;
            }
            
            document.getElementById('itemModal').style.display = 'block';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('itemModal');
            if (event.target === modal) {
                closeModal();
            }
        }
        
        // Initialize page when loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Page loaded, initializing category tabs...');
            
            // Add click event listeners to all category tabs
            const categoryTabs = document.querySelectorAll('.category-tab');
            console.log('📋 Found category tabs:', categoryTabs.length);
            
            categoryTabs.forEach((tab, index) => {
                const categoryId = tab.getAttribute('data-category');
                console.log(`📌 Tab ${index + 1}: ${categoryId} - ${tab.textContent.trim()}`);
                
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const clickedCategoryId = this.getAttribute('data-category');
                    console.log('🖱️ Tab clicked:', clickedCategoryId);
                    
                    // Call the filter function
                    filterByCategory(clickedCategoryId);
                });
                
                // Add hover effects
                tab.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('active')) {
                        this.style.transform = 'translateY(-2px)';
                    }
                });
                
                tab.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
            
            // Initialize with all items visible
            console.log('🎯 Initializing with all items visible...');
            filterByCategory('all');
        });
    </script>
</body>
</html>
