<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AROMA Restaurant - Admin Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            color: #2d3748;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .nav-tab {
            padding: 12px 24px;
            background: #4f46e5;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .nav-tab:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }
        
        .nav-tab.active {
            background: #059669;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
            display: block;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }
        
        .stat-card.clickable {
            border: 2px solid transparent;
        }
        
        .stat-card.clickable:hover {
            border-color: #4f46e5;
        }
        
        .stat-card h3 {
            color: #4f46e5;
            font-size: 2rem;
            margin-bottom: 10px;
        }
        
        .stat-card p {
            color: #6b7280;
            font-size: 1.1rem;
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .chart-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        .chart-container h3 {
            color: #2d3748;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .chart-type-switcher {
            display: flex;
            gap: 5px;
            background: #f3f4f6;
            border-radius: 8px;
            padding: 4px;
        }
        
        .chart-type-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.3s ease;
            background: transparent;
            color: #6b7280;
        }
        
        .chart-type-btn.active {
            background: #4f46e5;
            color: white;
        }
        
        .chart-type-btn:hover:not(.active) {
            background: #e5e7eb;
            color: #374151;
        }
        
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: #4f46e5;
            color: white;
        }
        
        .btn-primary:hover {
            background: #3730a3;
        }
        
        .btn-success {
            background: #059669;
            color: white;
        }
        
        .btn-danger {
            background: #dc2626;
            color: white;
        }
        
        @media (max-width: 768px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
            
            .nav-tabs {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üçî AROMA Restaurant Admin Dashboard</h1>
            <p>Professional restaurant management system</p>
            <div class="nav-tabs">
                <a href="/admin" class="nav-tab active">Dashboard</a>
                <a href="/admin/orders" class="nav-tab">Orders</a>
                <a href="/admin/items" class="nav-tab">Menu Items</a>
                <a href="/admin/categories" class="nav-tab">Categories</a>
                <a href="/admin/clients" class="nav-tab">Clients</a>
                <a href="/admin/qr" class="nav-tab">QR Codes</a>
                <a href="/admin/settings" class="nav-tab">Settings</a>
            </div>
        </div>

        <div class="stats-grid">
            <a href="/admin/orders/pending" class="stat-card clickable">
                <h3><%= stats.pending %></h3>
                <p>Pending Orders</p>
                <small>Click to view details</small>
            </a>
            <a href="/admin/orders/confirmed" class="stat-card clickable">
                <h3><%= stats.confirmed %></h3>
                <p>Confirmed Orders</p>
                <small>Click to view details</small>
            </a>
            <a href="/admin/orders/completed" class="stat-card clickable">
                <h3><%= stats.completed %></h3>
                <p>Completed Orders</p>
                <small>Click to view details</small>
            </a>
            <a href="/admin/sales/daily" class="stat-card clickable">
                <h3>‚Ç¨<%= stats.totalSales.toFixed(2) %></h3>
                <p>Total Sales (Excl. Cancelled)</p>
                <small>Click to view daily breakdown</small>
            </a>
            <a href="/admin/sales/completed" class="stat-card clickable">
                <h3>‚Ç¨<%= stats.completedSales.toFixed(2) %></h3>
                <p>Completed Sales</p>
                <small>Revenue from completed orders</small>
            </a>
        </div>

        <div class="charts-grid">
            <div class="chart-container">
                <div class="chart-header">
                    <h3>Order Status Distribution</h3>
                    <div class="chart-type-switcher">
                        <button class="chart-type-btn active" onclick="switchStatusChart('doughnut')">Pie</button>
                        <button class="chart-type-btn" onclick="switchStatusChart('bar')">Bar</button>
                    </div>
                </div>
                <canvas id="statusChart"></canvas>
            </div>
            <div class="chart-container">
                <div class="chart-header">
                    <h3>Category Performance</h3>
                    <div class="chart-type-switcher">
                        <button class="chart-type-btn" onclick="switchCategoryChart('pie')">Pie</button>
                        <button class="chart-type-btn active" onclick="switchCategoryChart('bar')">Bar</button>
                    </div>
                </div>
                <canvas id="categoryChart"></canvas>
                <div style="margin-top: 15px; font-size: 0.9rem; color: #6b7280;">
                    <strong>Category Details:</strong>
                    <div id="categoryDetails" style="margin-top: 10px;"></div>
                </div>
            </div>
        </div>

    </div>

    <script>
        // Global chart variables
        var statusChart = null;
        var categoryChart = null;
        
        // Chart data
        var statusData = {
            labels: ['Pending', 'Confirmed', 'Completed', 'Cancelled'],
            data: [<%= stats.pending %>, <%= stats.confirmed %>, <%= stats.completed %>, <%= stats.cancelled %>],
            backgroundColor: ['#f59e0b', '#10b981', '#3b82f6', '#ef4444']
        };
        
        // Calculate accurate category performance
        var categoryData = calculateCategoryPerformance();
        
        // Initialize charts
        function initializeCharts() {
            // Status Chart
            var statusCtx = document.getElementById('statusChart').getContext('2d');
            statusChart = new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: statusData.labels,
                    datasets: [{
                        data: statusData.data,
                        backgroundColor: statusData.backgroundColor
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Category Chart
            var categoryCtx = document.getElementById('categoryChart').getContext('2d');
            console.log('üé® Creating category chart with data:', categoryData);
            categoryChart = new Chart(categoryCtx, {
                type: 'bar',
                data: {
                    labels: categoryData.labels,
                    datasets: [{
                        label: 'Revenue (‚Ç¨)',
                        data: categoryData.data,
                        backgroundColor: categoryData.backgroundColor
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            console.log('‚úÖ Category chart created successfully');
            
            // Display category details
            displayCategoryDetails();
        }
        
        // Display detailed category performance
        function displayCategoryDetails() {
            var categoryStats = <%- JSON.stringify(categoryStats) %>;
            var detailsContainer = document.getElementById('categoryDetails');
            var detailsHtml = '';
            
            for (var categoryName in categoryStats) {
                var stats = categoryStats[categoryName];
                if (stats.revenue > 0) {
                    detailsHtml += '<div style="margin-bottom: 8px; padding: 8px; background: #f9fafb; border-radius: 6px;">';
                    detailsHtml += '<strong>' + categoryName + ':</strong> ';
                    detailsHtml += '‚Ç¨' + stats.revenue.toFixed(2) + ' revenue, ';
                    detailsHtml += stats.orders + ' orders, ';
                    detailsHtml += stats.items + ' items sold';
                    detailsHtml += '</div>';
                }
            }
            
            if (detailsHtml === '') {
                detailsHtml = '<div style="color: #9ca3af; font-style: italic;">No sales data available yet</div>';
            }
            
            detailsContainer.innerHTML = detailsHtml;
        }
        
        // Calculate accurate category performance based on individual items
        function calculateCategoryPerformance() {
            var categoryStats = <%- JSON.stringify(categoryStats) %>;
            var categoryLabels = [];
            var categoryData = [];
            var categoryColors = ['#4f46e5', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];
            
            console.log('üîç DEBUGGING CHART DATA:');
            console.log('Raw categoryStats from server:', categoryStats);
            console.log('Category stats keys:', Object.keys(categoryStats));
            
            // Use the accurate categoryStats from server (now calculated per individual items)
            for (var categoryName in categoryStats) {
                var revenue = parseFloat(categoryStats[categoryName].revenue);
                console.log(`Category ${categoryName}: revenue=${revenue}, orders=${categoryStats[categoryName].orders}, items=${categoryStats[categoryName].items}`);
                
                if (revenue > 0) {
                    categoryLabels.push(categoryName);
                    categoryData.push(revenue);
                }
            }
            
            console.log('Category Performance Data:', {
                labels: categoryLabels,
                data: categoryData,
                stats: categoryStats
            });
            
            // If no data, show placeholder
            if (categoryLabels.length === 0) {
                categoryLabels = ['No Sales Data'];
                categoryData = [0];
                categoryColors = ['#e5e7eb'];
                console.log('‚ö†Ô∏è No category sales data found - showing placeholder');
            }
            
            return {
                labels: categoryLabels,
                data: categoryData,
                backgroundColor: categoryColors.slice(0, categoryLabels.length)
            };
        }
        
        // Switch status chart type
        function switchStatusChart(type) {
            if (statusChart) {
                statusChart.destroy();
            }
            
            // Update button states
            var statusContainer = document.querySelector('#statusChart').closest('.chart-container');
            var buttons = statusContainer.querySelectorAll('.chart-type-btn');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('active');
            }
            event.target.classList.add('active');
            
            var statusCtx = document.getElementById('statusChart').getContext('2d');
            var chartOptions = {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            };
            
            if (type === 'bar') {
                chartOptions.scales = {
                    y: {
                        beginAtZero: true
                    }
                };
            }
            
            statusChart = new Chart(statusCtx, {
                type: type,
                data: {
                    labels: statusData.labels,
                    datasets: [{
                        label: type === 'bar' ? 'Orders' : '',
                        data: statusData.data,
                        backgroundColor: statusData.backgroundColor
                    }]
                },
                options: chartOptions
            });
        }
        
        // Switch category chart type
        function switchCategoryChart(type) {
            if (categoryChart) {
                categoryChart.destroy();
            }
            
            // Update button states
            var categoryContainer = document.querySelector('#categoryChart').closest('.chart-container');
            var buttons = categoryContainer.querySelectorAll('.chart-type-btn');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('active');
            }
            event.target.classList.add('active');
            
            var categoryCtx = document.getElementById('categoryChart').getContext('2d');
            var chartOptions = {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            };
            
            if (type === 'bar') {
                chartOptions.scales = {
                    y: {
                        beginAtZero: true
                    }
                };
            }
            
            categoryChart = new Chart(categoryCtx, {
                type: type,
                data: {
                    labels: categoryData.labels,
                    datasets: [{
                        label: type === 'bar' ? 'Revenue (‚Ç¨)' : '',
                        data: categoryData.data,
                        backgroundColor: categoryData.backgroundColor
                    }]
                },
                options: chartOptions
            });
        }

        
        
        // Initialize charts when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            
            // Debug: Log all orders in the table
            console.log('üîç Dashboard loaded - checking orders in table:');
            const orderRows = document.querySelectorAll('tbody tr');
            orderRows.forEach((row, index) => {
                const orderId = row.querySelector('td:first-child')?.textContent;
                const status = row.querySelector('.status-badge')?.textContent;
                console.log(`Order ${index + 1}: ID=${orderId}, Status=${status}`);
            });
            
            // Check for duplicate orders and warn user
            const orderIds = Array.from(orderRows).map(row => row.querySelector('td:first-child')?.textContent);
            const uniqueIds = [...new Set(orderIds)];
            if (orderIds.length !== uniqueIds.length) {
                console.warn('‚ö†Ô∏è DUPLICATE ORDERS DETECTED!');
                console.warn('Total orders:', orderIds.length);
                console.warn('Unique orders:', uniqueIds.length);
                console.warn('This may cause status updates to not appear correctly.');
            }
        });
    </script>
</body>
</html>
